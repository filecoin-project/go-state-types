// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package verifreg

import (
	"fmt"
	"io"
	"sort"

	abi "github.com/filecoin-project/go-state-types/abi"
	exitcode "github.com/filecoin-project/go-state-types/exitcode"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

var lengthBufState = []byte{134}

func (t *State) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufState); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.RootKey (address.Address) (struct)
	if err := t.RootKey.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Verifiers (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Verifiers); err != nil {
		return xerrors.Errorf("failed to write cid field t.Verifiers: %w", err)
	}

	// t.RemoveDataCapProposalIDs (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.RemoveDataCapProposalIDs); err != nil {
		return xerrors.Errorf("failed to write cid field t.RemoveDataCapProposalIDs: %w", err)
	}

	// t.Allocations (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Allocations); err != nil {
		return xerrors.Errorf("failed to write cid field t.Allocations: %w", err)
	}

	// t.NextAllocationId (verifreg.AllocationId) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.NextAllocationId)); err != nil {
		return err
	}

	// t.Claims (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Claims); err != nil {
		return xerrors.Errorf("failed to write cid field t.Claims: %w", err)
	}

	return nil
}

func (t *State) UnmarshalCBOR(r io.Reader) error {
	*t = State{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 6 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.RootKey (address.Address) (struct)

	{

		if err := t.RootKey.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.RootKey: %w", err)
		}

	}
	// t.Verifiers (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Verifiers: %w", err)
		}

		t.Verifiers = c

	}
	// t.RemoveDataCapProposalIDs (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.RemoveDataCapProposalIDs: %w", err)
		}

		t.RemoveDataCapProposalIDs = c

	}
	// t.Allocations (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Allocations: %w", err)
		}

		t.Allocations = c

	}
	// t.NextAllocationId (verifreg.AllocationId) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.NextAllocationId = AllocationId(extra)

	}
	// t.Claims (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Claims: %w", err)
		}

		t.Claims = c

	}
	return nil
}

var lengthBufAddVerifierParams = []byte{130}

func (t *AddVerifierParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufAddVerifierParams); err != nil {
		return err
	}

	// t.Address (address.Address) (struct)
	if err := t.Address.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Allowance (big.Int) (struct)
	if err := t.Allowance.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *AddVerifierParams) UnmarshalCBOR(r io.Reader) error {
	*t = AddVerifierParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Address (address.Address) (struct)

	{

		if err := t.Address.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Address: %w", err)
		}

	}
	// t.Allowance (big.Int) (struct)

	{

		if err := t.Allowance.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Allowance: %w", err)
		}

	}
	return nil
}

var lengthBufAddVerifiedClientParams = []byte{130}

func (t *AddVerifiedClientParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufAddVerifiedClientParams); err != nil {
		return err
	}

	// t.Address (address.Address) (struct)
	if err := t.Address.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Allowance (big.Int) (struct)
	if err := t.Allowance.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *AddVerifiedClientParams) UnmarshalCBOR(r io.Reader) error {
	*t = AddVerifiedClientParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Address (address.Address) (struct)

	{

		if err := t.Address.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Address: %w", err)
		}

	}
	// t.Allowance (big.Int) (struct)

	{

		if err := t.Allowance.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Allowance: %w", err)
		}

	}
	return nil
}

var lengthBufUseBytesParams = []byte{130}

func (t *UseBytesParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufUseBytesParams); err != nil {
		return err
	}

	// t.Address (address.Address) (struct)
	if err := t.Address.MarshalCBOR(w); err != nil {
		return err
	}

	// t.DealSize (big.Int) (struct)
	if err := t.DealSize.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *UseBytesParams) UnmarshalCBOR(r io.Reader) error {
	*t = UseBytesParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Address (address.Address) (struct)

	{

		if err := t.Address.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Address: %w", err)
		}

	}
	// t.DealSize (big.Int) (struct)

	{

		if err := t.DealSize.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.DealSize: %w", err)
		}

	}
	return nil
}

var lengthBufRestoreBytesParams = []byte{130}

func (t *RestoreBytesParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRestoreBytesParams); err != nil {
		return err
	}

	// t.Address (address.Address) (struct)
	if err := t.Address.MarshalCBOR(w); err != nil {
		return err
	}

	// t.DealSize (big.Int) (struct)
	if err := t.DealSize.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *RestoreBytesParams) UnmarshalCBOR(r io.Reader) error {
	*t = RestoreBytesParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Address (address.Address) (struct)

	{

		if err := t.Address.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Address: %w", err)
		}

	}
	// t.DealSize (big.Int) (struct)

	{

		if err := t.DealSize.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.DealSize: %w", err)
		}

	}
	return nil
}

var lengthBufRemoveDataCapParams = []byte{132}

func (t *RemoveDataCapParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRemoveDataCapParams); err != nil {
		return err
	}

	// t.VerifiedClientToRemove (address.Address) (struct)
	if err := t.VerifiedClientToRemove.MarshalCBOR(w); err != nil {
		return err
	}

	// t.DataCapAmountToRemove (big.Int) (struct)
	if err := t.DataCapAmountToRemove.MarshalCBOR(w); err != nil {
		return err
	}

	// t.VerifierRequest1 (verifreg.RemoveDataCapRequest) (struct)
	if err := t.VerifierRequest1.MarshalCBOR(w); err != nil {
		return err
	}

	// t.VerifierRequest2 (verifreg.RemoveDataCapRequest) (struct)
	if err := t.VerifierRequest2.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *RemoveDataCapParams) UnmarshalCBOR(r io.Reader) error {
	*t = RemoveDataCapParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.VerifiedClientToRemove (address.Address) (struct)

	{

		if err := t.VerifiedClientToRemove.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.VerifiedClientToRemove: %w", err)
		}

	}
	// t.DataCapAmountToRemove (big.Int) (struct)

	{

		if err := t.DataCapAmountToRemove.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.DataCapAmountToRemove: %w", err)
		}

	}
	// t.VerifierRequest1 (verifreg.RemoveDataCapRequest) (struct)

	{

		if err := t.VerifierRequest1.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.VerifierRequest1: %w", err)
		}

	}
	// t.VerifierRequest2 (verifreg.RemoveDataCapRequest) (struct)

	{

		if err := t.VerifierRequest2.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.VerifierRequest2: %w", err)
		}

	}
	return nil
}

var lengthBufRemoveDataCapReturn = []byte{130}

func (t *RemoveDataCapReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRemoveDataCapReturn); err != nil {
		return err
	}

	// t.VerifiedClient (address.Address) (struct)
	if err := t.VerifiedClient.MarshalCBOR(w); err != nil {
		return err
	}

	// t.DataCapRemoved (big.Int) (struct)
	if err := t.DataCapRemoved.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *RemoveDataCapReturn) UnmarshalCBOR(r io.Reader) error {
	*t = RemoveDataCapReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.VerifiedClient (address.Address) (struct)

	{

		if err := t.VerifiedClient.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.VerifiedClient: %w", err)
		}

	}
	// t.DataCapRemoved (big.Int) (struct)

	{

		if err := t.DataCapRemoved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.DataCapRemoved: %w", err)
		}

	}
	return nil
}

var lengthBufRemoveExpiredAllocationsParams = []byte{130}

func (t *RemoveExpiredAllocationsParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRemoveExpiredAllocationsParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Client (abi.ActorID) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Client)); err != nil {
		return err
	}

	// t.AllocationIds ([]verifreg.AllocationId) (slice)
	if len(t.AllocationIds) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AllocationIds was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AllocationIds))); err != nil {
		return err
	}
	for _, v := range t.AllocationIds {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *RemoveExpiredAllocationsParams) UnmarshalCBOR(r io.Reader) error {
	*t = RemoveExpiredAllocationsParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Client (abi.ActorID) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Client = abi.ActorID(extra)

	}
	// t.AllocationIds ([]verifreg.AllocationId) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AllocationIds: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AllocationIds = make([]AllocationId, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.AllocationIds slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.AllocationIds was not a uint, instead got %d", maj)
		}

		t.AllocationIds[i] = AllocationId(val)
	}

	return nil
}

var lengthBufRemoveExpiredAllocationsReturn = []byte{131}

func (t *RemoveExpiredAllocationsReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRemoveExpiredAllocationsReturn); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Considered ([]verifreg.AllocationId) (slice)
	if len(t.Considered) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Considered was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Considered))); err != nil {
		return err
	}
	for _, v := range t.Considered {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.Results (verifreg.BatchReturn) (struct)
	if err := t.Results.MarshalCBOR(w); err != nil {
		return err
	}

	// t.DataCapRecovered (big.Int) (struct)
	if err := t.DataCapRecovered.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *RemoveExpiredAllocationsReturn) UnmarshalCBOR(r io.Reader) error {
	*t = RemoveExpiredAllocationsReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Considered ([]verifreg.AllocationId) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Considered: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Considered = make([]AllocationId, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.Considered slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.Considered was not a uint, instead got %d", maj)
		}

		t.Considered[i] = AllocationId(val)
	}

	// t.Results (verifreg.BatchReturn) (struct)

	{

		if err := t.Results.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Results: %w", err)
		}

	}
	// t.DataCapRecovered (big.Int) (struct)

	{

		if err := t.DataCapRecovered.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.DataCapRecovered: %w", err)
		}

	}
	return nil
}

var lengthBufBatchReturn = []byte{130}

func (t *BatchReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufBatchReturn); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.SuccessCount (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.SuccessCount)); err != nil {
		return err
	}

	// t.FailCodes ([]verifreg.FailCode) (slice)
	if len(t.FailCodes) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.FailCodes was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.FailCodes))); err != nil {
		return err
	}
	for _, v := range t.FailCodes {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *BatchReturn) UnmarshalCBOR(r io.Reader) error {
	*t = BatchReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.SuccessCount (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.SuccessCount = uint64(extra)

	}
	// t.FailCodes ([]verifreg.FailCode) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.FailCodes: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.FailCodes = make([]FailCode, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v FailCode
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.FailCodes[i] = v
	}

	return nil
}

var lengthBufClaimAllocationsParams = []byte{130}

func (t *ClaimAllocationsParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufClaimAllocationsParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Sectors ([]verifreg.SectorAllocationClaim) (slice)
	if len(t.Sectors) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Sectors was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Sectors))); err != nil {
		return err
	}
	for _, v := range t.Sectors {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}

	// t.AllOrNothing (bool) (bool)
	if err := cbg.WriteBool(w, t.AllOrNothing); err != nil {
		return err
	}
	return nil
}

func (t *ClaimAllocationsParams) UnmarshalCBOR(r io.Reader) error {
	*t = ClaimAllocationsParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Sectors ([]verifreg.SectorAllocationClaim) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Sectors: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Sectors = make([]SectorAllocationClaim, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v SectorAllocationClaim
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Sectors[i] = v
	}

	// t.AllOrNothing (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.AllOrNothing = false
	case 21:
		t.AllOrNothing = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	return nil
}

var lengthBufClaimAllocationsReturn = []byte{130}

func (t *ClaimAllocationsReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufClaimAllocationsReturn); err != nil {
		return err
	}

	// t.BatchInfo (verifreg.BatchReturn) (struct)
	if err := t.BatchInfo.MarshalCBOR(w); err != nil {
		return err
	}

	// t.ClaimedSpace (big.Int) (struct)
	if err := t.ClaimedSpace.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *ClaimAllocationsReturn) UnmarshalCBOR(r io.Reader) error {
	*t = ClaimAllocationsReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.BatchInfo (verifreg.BatchReturn) (struct)

	{

		if err := t.BatchInfo.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.BatchInfo: %w", err)
		}

	}
	// t.ClaimedSpace (big.Int) (struct)

	{

		if err := t.ClaimedSpace.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.ClaimedSpace: %w", err)
		}

	}
	return nil
}

var lengthBufGetClaimsParams = []byte{130}

func (t *GetClaimsParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufGetClaimsParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Provider (abi.ActorID) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Provider)); err != nil {
		return err
	}

	// t.ClaimIds ([]verifreg.ClaimId) (slice)
	if len(t.ClaimIds) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.ClaimIds was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.ClaimIds))); err != nil {
		return err
	}
	for _, v := range t.ClaimIds {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *GetClaimsParams) UnmarshalCBOR(r io.Reader) error {
	*t = GetClaimsParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Provider (abi.ActorID) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Provider = abi.ActorID(extra)

	}
	// t.ClaimIds ([]verifreg.ClaimId) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.ClaimIds: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.ClaimIds = make([]ClaimId, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.ClaimIds slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.ClaimIds was not a uint, instead got %d", maj)
		}

		t.ClaimIds[i] = ClaimId(val)
	}

	return nil
}

var lengthBufGetClaimsReturn = []byte{130}

func (t *GetClaimsReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufGetClaimsReturn); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.BatchInfo (verifreg.BatchReturn) (struct)
	if err := t.BatchInfo.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Claims ([]verifreg.Claim) (slice)
	if len(t.Claims) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Claims was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Claims))); err != nil {
		return err
	}
	for _, v := range t.Claims {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *GetClaimsReturn) UnmarshalCBOR(r io.Reader) error {
	*t = GetClaimsReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.BatchInfo (verifreg.BatchReturn) (struct)

	{

		if err := t.BatchInfo.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.BatchInfo: %w", err)
		}

	}
	// t.Claims ([]verifreg.Claim) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Claims: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Claims = make([]Claim, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v Claim
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Claims[i] = v
	}

	return nil
}

var lengthBufUniversalReceiverParams = []byte{130}

func (t *UniversalReceiverParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufUniversalReceiverParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Type_ (verifreg.ReceiverType) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Type_)); err != nil {
		return err
	}

	// t.Payload ([]uint8) (slice)
	if len(t.Payload) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Payload was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Payload))); err != nil {
		return err
	}

	if _, err := w.Write(t.Payload[:]); err != nil {
		return err
	}
	return nil
}

func (t *UniversalReceiverParams) UnmarshalCBOR(r io.Reader) error {
	*t = UniversalReceiverParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Type_ (verifreg.ReceiverType) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Type_ = ReceiverType(extra)

	}
	// t.Payload ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Payload: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Payload = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.Payload[:]); err != nil {
		return err
	}
	return nil
}

var lengthBufAllocationsResponse = []byte{131}

func (t *AllocationsResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufAllocationsResponse); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.AllocationResults (verifreg.BatchReturn) (struct)
	if err := t.AllocationResults.MarshalCBOR(w); err != nil {
		return err
	}

	// t.ExtensionResults (verifreg.BatchReturn) (struct)
	if err := t.ExtensionResults.MarshalCBOR(w); err != nil {
		return err
	}

	// t.NewAllocations ([]verifreg.AllocationId) (slice)
	if len(t.NewAllocations) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.NewAllocations was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.NewAllocations))); err != nil {
		return err
	}
	for _, v := range t.NewAllocations {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *AllocationsResponse) UnmarshalCBOR(r io.Reader) error {
	*t = AllocationsResponse{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AllocationResults (verifreg.BatchReturn) (struct)

	{

		if err := t.AllocationResults.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AllocationResults: %w", err)
		}

	}
	// t.ExtensionResults (verifreg.BatchReturn) (struct)

	{

		if err := t.ExtensionResults.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.ExtensionResults: %w", err)
		}

	}
	// t.NewAllocations ([]verifreg.AllocationId) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.NewAllocations: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.NewAllocations = make([]AllocationId, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.NewAllocations slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.NewAllocations was not a uint, instead got %d", maj)
		}

		t.NewAllocations[i] = AllocationId(val)
	}

	return nil
}

var lengthBufExtendClaimTermsParams = []byte{129}

func (t *ExtendClaimTermsParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufExtendClaimTermsParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Terms ([]verifreg.ClaimTerm) (slice)
	if len(t.Terms) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Terms was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Terms))); err != nil {
		return err
	}
	for _, v := range t.Terms {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *ExtendClaimTermsParams) UnmarshalCBOR(r io.Reader) error {
	*t = ExtendClaimTermsParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Terms ([]verifreg.ClaimTerm) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Terms: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Terms = make([]ClaimTerm, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v ClaimTerm
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Terms[i] = v
	}

	return nil
}

var lengthBufExtendClaimTermsReturn = []byte{130}

func (t *ExtendClaimTermsReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufExtendClaimTermsReturn); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.SuccessCount (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.SuccessCount)); err != nil {
		return err
	}

	// t.FailCodes ([]verifreg.FailCode) (slice)
	if len(t.FailCodes) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.FailCodes was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.FailCodes))); err != nil {
		return err
	}
	for _, v := range t.FailCodes {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *ExtendClaimTermsReturn) UnmarshalCBOR(r io.Reader) error {
	*t = ExtendClaimTermsReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.SuccessCount (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.SuccessCount = uint64(extra)

	}
	// t.FailCodes ([]verifreg.FailCode) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.FailCodes: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.FailCodes = make([]FailCode, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v FailCode
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.FailCodes[i] = v
	}

	return nil
}

var lengthBufRemoveExpiredClaimsParams = []byte{130}

func (t *RemoveExpiredClaimsParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRemoveExpiredClaimsParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Provider (abi.ActorID) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Provider)); err != nil {
		return err
	}

	// t.ClaimIds ([]verifreg.ClaimId) (slice)
	if len(t.ClaimIds) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.ClaimIds was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.ClaimIds))); err != nil {
		return err
	}
	for _, v := range t.ClaimIds {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *RemoveExpiredClaimsParams) UnmarshalCBOR(r io.Reader) error {
	*t = RemoveExpiredClaimsParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Provider (abi.ActorID) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Provider = abi.ActorID(extra)

	}
	// t.ClaimIds ([]verifreg.ClaimId) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.ClaimIds: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.ClaimIds = make([]ClaimId, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.ClaimIds slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.ClaimIds was not a uint, instead got %d", maj)
		}

		t.ClaimIds[i] = ClaimId(val)
	}

	return nil
}

var lengthBufRemoveExpiredClaimsReturn = []byte{130}

func (t *RemoveExpiredClaimsReturn) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRemoveExpiredClaimsReturn); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Considered ([]verifreg.AllocationId) (slice)
	if len(t.Considered) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Considered was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Considered))); err != nil {
		return err
	}
	for _, v := range t.Considered {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.Results (verifreg.BatchReturn) (struct)
	if err := t.Results.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *RemoveExpiredClaimsReturn) UnmarshalCBOR(r io.Reader) error {
	*t = RemoveExpiredClaimsReturn{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Considered ([]verifreg.AllocationId) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Considered: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Considered = make([]AllocationId, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.Considered slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.Considered was not a uint, instead got %d", maj)
		}

		t.Considered[i] = AllocationId(val)
	}

	// t.Results (verifreg.BatchReturn) (struct)

	{

		if err := t.Results.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Results: %w", err)
		}

	}
	return nil
}

var lengthBufRemoveDataCapRequest = []byte{130}

func (t *RemoveDataCapRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRemoveDataCapRequest); err != nil {
		return err
	}

	// t.Verifier (address.Address) (struct)
	if err := t.Verifier.MarshalCBOR(w); err != nil {
		return err
	}

	// t.VerifierSignature (crypto.Signature) (struct)
	if err := t.VerifierSignature.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *RemoveDataCapRequest) UnmarshalCBOR(r io.Reader) error {
	*t = RemoveDataCapRequest{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Verifier (address.Address) (struct)

	{

		if err := t.Verifier.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Verifier: %w", err)
		}

	}
	// t.VerifierSignature (crypto.Signature) (struct)

	{

		if err := t.VerifierSignature.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.VerifierSignature: %w", err)
		}

	}
	return nil
}

var lengthBufRemoveDataCapProposal = []byte{131}

func (t *RemoveDataCapProposal) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRemoveDataCapProposal); err != nil {
		return err
	}

	// t.VerifiedClient (address.Address) (struct)
	if err := t.VerifiedClient.MarshalCBOR(w); err != nil {
		return err
	}

	// t.DataCapAmount (big.Int) (struct)
	if err := t.DataCapAmount.MarshalCBOR(w); err != nil {
		return err
	}

	// t.RemovalProposalID (verifreg.RmDcProposalID) (struct)
	if err := t.RemovalProposalID.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *RemoveDataCapProposal) UnmarshalCBOR(r io.Reader) error {
	*t = RemoveDataCapProposal{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.VerifiedClient (address.Address) (struct)

	{

		if err := t.VerifiedClient.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.VerifiedClient: %w", err)
		}

	}
	// t.DataCapAmount (big.Int) (struct)

	{

		if err := t.DataCapAmount.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.DataCapAmount: %w", err)
		}

	}
	// t.RemovalProposalID (verifreg.RmDcProposalID) (struct)

	{

		if err := t.RemovalProposalID.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.RemovalProposalID: %w", err)
		}

	}
	return nil
}

var lengthBufRmDcProposalID = []byte{129}

func (t *RmDcProposalID) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufRmDcProposalID); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.ProposalID (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.ProposalID)); err != nil {
		return err
	}

	return nil
}

func (t *RmDcProposalID) UnmarshalCBOR(r io.Reader) error {
	*t = RmDcProposalID{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ProposalID (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.ProposalID = uint64(extra)

	}
	return nil
}

var lengthBufFailCode = []byte{130}

func (t *FailCode) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufFailCode); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Idx (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Idx)); err != nil {
		return err
	}

	// t.Code (exitcode.ExitCode) (int64)
	if t.Code >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Code)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Code-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *FailCode) UnmarshalCBOR(r io.Reader) error {
	*t = FailCode{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Idx (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Idx = uint64(extra)

	}
	// t.Code (exitcode.ExitCode) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Code = exitcode.ExitCode(extraI)
	}
	return nil
}

var lengthBufSectorAllocationClaim = []byte{134}

func (t *SectorAllocationClaim) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufSectorAllocationClaim); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Client (abi.ActorID) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Client)); err != nil {
		return err
	}

	// t.AllocationId (verifreg.AllocationId) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AllocationId)); err != nil {
		return err
	}

	// t.Data (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Data); err != nil {
		return xerrors.Errorf("failed to write cid field t.Data: %w", err)
	}

	// t.Size (abi.PaddedPieceSize) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Size)); err != nil {
		return err
	}

	// t.Sector (abi.SectorNumber) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Sector)); err != nil {
		return err
	}

	// t.SectorExpiry (abi.ChainEpoch) (int64)
	if t.SectorExpiry >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.SectorExpiry)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.SectorExpiry-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *SectorAllocationClaim) UnmarshalCBOR(r io.Reader) error {
	*t = SectorAllocationClaim{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 6 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Client (abi.ActorID) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Client = abi.ActorID(extra)

	}
	// t.AllocationId (verifreg.AllocationId) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.AllocationId = AllocationId(extra)

	}
	// t.Data (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Data: %w", err)
		}

		t.Data = c

	}
	// t.Size (abi.PaddedPieceSize) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Size = abi.PaddedPieceSize(extra)

	}
	// t.Sector (abi.SectorNumber) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Sector = abi.SectorNumber(extra)

	}
	// t.SectorExpiry (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.SectorExpiry = abi.ChainEpoch(extraI)
	}
	return nil
}

var lengthBufClaim = []byte{136}

func (t *Claim) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufClaim); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Provider (abi.ActorID) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Provider)); err != nil {
		return err
	}

	// t.Client (abi.ActorID) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Client)); err != nil {
		return err
	}

	// t.Data (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Data); err != nil {
		return xerrors.Errorf("failed to write cid field t.Data: %w", err)
	}

	// t.Size (abi.PaddedPieceSize) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Size)); err != nil {
		return err
	}

	// t.TermMin (abi.ChainEpoch) (int64)
	if t.TermMin >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.TermMin)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.TermMin-1)); err != nil {
			return err
		}
	}

	// t.TermMax (abi.ChainEpoch) (int64)
	if t.TermMax >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.TermMax)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.TermMax-1)); err != nil {
			return err
		}
	}

	// t.TermStart (abi.ChainEpoch) (int64)
	if t.TermStart >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.TermStart)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.TermStart-1)); err != nil {
			return err
		}
	}

	// t.Sector (abi.SectorNumber) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Sector)); err != nil {
		return err
	}

	return nil
}

func (t *Claim) UnmarshalCBOR(r io.Reader) error {
	*t = Claim{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 8 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Provider (abi.ActorID) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Provider = abi.ActorID(extra)

	}
	// t.Client (abi.ActorID) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Client = abi.ActorID(extra)

	}
	// t.Data (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Data: %w", err)
		}

		t.Data = c

	}
	// t.Size (abi.PaddedPieceSize) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Size = abi.PaddedPieceSize(extra)

	}
	// t.TermMin (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.TermMin = abi.ChainEpoch(extraI)
	}
	// t.TermMax (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.TermMax = abi.ChainEpoch(extraI)
	}
	// t.TermStart (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.TermStart = abi.ChainEpoch(extraI)
	}
	// t.Sector (abi.SectorNumber) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Sector = abi.SectorNumber(extra)

	}
	return nil
}

var lengthBufClaimTerm = []byte{131}

func (t *ClaimTerm) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufClaimTerm); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Provider (abi.ActorID) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Provider)); err != nil {
		return err
	}

	// t.ClaimId (verifreg.ClaimId) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.ClaimId)); err != nil {
		return err
	}

	// t.TermMax (abi.ChainEpoch) (int64)
	if t.TermMax >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.TermMax)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.TermMax-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *ClaimTerm) UnmarshalCBOR(r io.Reader) error {
	*t = ClaimTerm{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Provider (abi.ActorID) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Provider = abi.ActorID(extra)

	}
	// t.ClaimId (verifreg.ClaimId) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.ClaimId = ClaimId(extra)

	}
	// t.TermMax (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.TermMax = abi.ChainEpoch(extraI)
	}
	return nil
}

var lengthBufAllocation = []byte{135}

func (t *Allocation) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufAllocation); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Client (abi.ActorID) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Client)); err != nil {
		return err
	}

	// t.Provider (abi.ActorID) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Provider)); err != nil {
		return err
	}

	// t.Data (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Data); err != nil {
		return xerrors.Errorf("failed to write cid field t.Data: %w", err)
	}

	// t.Size (abi.PaddedPieceSize) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Size)); err != nil {
		return err
	}

	// t.TermMin (abi.ChainEpoch) (int64)
	if t.TermMin >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.TermMin)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.TermMin-1)); err != nil {
			return err
		}
	}

	// t.TermMax (abi.ChainEpoch) (int64)
	if t.TermMax >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.TermMax)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.TermMax-1)); err != nil {
			return err
		}
	}

	// t.Expiration (abi.ChainEpoch) (int64)
	if t.Expiration >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Expiration)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Expiration-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *Allocation) UnmarshalCBOR(r io.Reader) error {
	*t = Allocation{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 7 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Client (abi.ActorID) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Client = abi.ActorID(extra)

	}
	// t.Provider (abi.ActorID) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Provider = abi.ActorID(extra)

	}
	// t.Data (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Data: %w", err)
		}

		t.Data = c

	}
	// t.Size (abi.PaddedPieceSize) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Size = abi.PaddedPieceSize(extra)

	}
	// t.TermMin (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.TermMin = abi.ChainEpoch(extraI)
	}
	// t.TermMax (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.TermMax = abi.ChainEpoch(extraI)
	}
	// t.Expiration (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Expiration = abi.ChainEpoch(extraI)
	}
	return nil
}
